@using RNPM.Common.ViewModels.Core
@{
    ViewData["Title"] = "Dashboard";
}
@{
    var application = (ApplicationViewModel)ViewBag.Application;
    var components = (IEnumerable<ScreenComponentViewModel>)ViewBag.ScreenComponents;
    var navigations = (IEnumerable<NavigationViewModel>)ViewBag.Navigations;
    var networkRequests = (IEnumerable<NetworkRequestViewModel>)ViewBag.NetworkRequests;
}

<div id="content" class="app-content">

    <ol class="breadcrumb float-xl-end">
    </ol>

    <h1 class="page-header">@application.Name</h1>

    <div class="row">
        <div class="col-xl-4 col-md-6">
            <div class="widget widget-stats bg-blue">
                <div class="stats-icon"><i class="fa fa-mobile"></i></div>
                <div class="stats-info">
                    <h4>Managed Components</h4>
                    <p>@components.Count()</p>
                </div>
                <div class="stats-link">
                    <a href="@Url.Action("Index","Renders", new { applicationId = application.Id })">View Details <i class="fa fa-arrow-alt-circle-right"></i></a>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6">
            <div class="widget widget-stats bg-info">
                <div class="stats-icon"><i class="fa fa-code-compare"></i></div>
                <div class="stats-info">
                    <h4>Managed Navigations</h4>
                    <p>@navigations.Count()</p>
                </div>
                <div class="stats-link">
                    <a href="@Url.Action("Index","Navigations", new { applicationId = application.Id })">View Details <i class="fa fa-arrow-alt-circle-right"></i></a>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6">
            <div class="widget widget-stats bg-orange">
                <div class="stats-icon"><i class="fa fa-link"></i></div>
                <div class="stats-info">
                    <h4>Managed Requests</h4>
                    <p>@networkRequests.Count()</p>
                </div>
                <div class="stats-link">
                    <a href="@Url.Action("Index","Requests", new { applicationId = application.Id })">View Details <i class="fa fa-arrow-alt-circle-right"></i></a>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h4 class="card-title mb-0">Performance Metrics Overview</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Component Renders</h5>
                                    <p>Monitor your component render performance and receive optimization suggestions.</p>
                                    <a href="@Url.Action("Index","Renders", new { applicationId = application.Id })" class="btn btn-primary">
                                        <i class="fa fa-chart-line me-1"></i> View Components
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Navigation Performance</h5>
                                    <p>Analyze navigation times between screens to ensure smooth transitions.</p>
                                    <a href="@Url.Action("Index","Navigations", new { applicationId = application.Id })" class="btn btn-info">
                                        <i class="fa fa-code-compare me-1"></i> View Navigations
                                    </a>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Network Requests</h5>
                                    <p>Monitor API calls and network request performance for optimal data loading.</p>
                                    <a href="@Url.Action("Index","Requests", new { applicationId = application.Id })" class="btn btn-warning">
                                        <i class="fa fa-link me-1"></i> View Requests
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h4 class="card-title mb-0">Integration Guide</h4>
                </div>
                <div class="card-body">
                    <p>To collect metrics from your React Native application, use the following access code:</p>
                    <div class="alert alert-info">
                        <h5 class="mb-2">Access Code</h5>
                        <div class="d-flex align-items-center">
                            <code id="accessCode" class="fs-5 me-2">@application.UniqueAccessCode</code>
                            <button onclick="copyAccessCode()" class="btn btn-sm btn-light" id="copyBtn" title="Copy to clipboard">
                                <i class="fa fa-copy text-dark"></i>
                            </button>
                            <span id="copySuccess" class="ms-2 text-success" style="display: none;">
                                <i class="fa fa-check"></i> Copied!
                            </span>
                        </div>
                    </div>
                    
                    <div class="row">
                        <!-- Component Render Monitoring Tab -->
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-header bg-blue text-white">
                                    <h5 class="card-title mb-0">
                                        <i class="fa fa-mobile me-1"></i> Component Render Monitoring
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <p>Track component render times to identify slow UI components:</p>
                                    <pre><code>import { withRenderTimeMonitor } from 'react-native-performance-monitor';
    
    // Component definition
    const MyComponent = (props) => {
      return (
        <View>
          <Text>Hello World</Text>
        </View>
      );
    };
    
    // Export with monitoring wrapper
    export default withRenderTimeMonitor(MyComponent);</code></pre>
                                    <p class="small text-muted mt-2">Pass access code through props:</p>
                                    <pre><code><MyComponent uniqueAccessCode="@application.UniqueAccessCode" /></code></pre>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Navigation Monitoring Tab -->
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-header bg-info text-white">
                                    <h5 class="card-title mb-0">
                                        <i class="fa fa-code-compare me-1"></i> Navigation Monitoring
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <p>Track navigation times between screens:</p>
                                    <pre><code>// 1. Add NavigationObserver to your app
    import { NavigationObserver } from 'react-native-performance-monitor';
    
    // Inside your Navigation Container
    <NavigationContainer>
      <NavigationObserver 
        uniqueAccessCode="@application.UniqueAccessCode" 
      />
      <Stack.Navigator>
        {/* Your screens */}
      </Stack.Navigator>
    </NavigationContainer>
    
    // 2. Track navigation start time
    import { setNavigationStartTime } from 'react-native-performance-monitor';
    
    const goToDetails = () => {
      setNavigationStartTime(
        performance.now(), 
        'Home',          // Source screen
        'Details'        // Destination screen
      );
      navigation.navigate('Details');
    };</code></pre>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Network Request Monitoring Tab -->
                        <div class="col-md-4">
                            <div class="card mb-3">
                                <div class="card-header bg-orange text-white">
                                    <h5 class="card-title mb-0">
                                        <i class="fa fa-link me-1"></i> Network Request Monitoring
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <p>Track API call performance:</p>
                                    <pre><code>import { fetchWithTimer } from 'react-native-performance-monitor';
    
    // Replace standard fetch calls
    const loadData = async () => {
      try {
        const response = await fetchWithTimer(
          '@application.UniqueAccessCode',  // Access code
          'getUserProfile',                 // Request name
          'https://api.example.com/users'   // URL
        );
        
        // Process response normally
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error:', error);
      }
    };</code></pre>
                                    <p class="small text-muted mt-2">With request options:</p>
                                    <pre><code>// Fourth parameter for options
    fetchWithTimer(
      accessCode,
      requestName,
      url,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      }
    );</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3 alert alert-secondary">
                        <h5><i class="fa fa-lightbulb me-2"></i>Best Practices</h5>
                        <ul class="mb-0">
                            <li>Apply <code>withRenderTimeMonitor</code> to complex components that might have performance issues</li>
                            <li>Call <code>setNavigationStartTime</code> immediately before triggering navigation</li>
                            <li>Use <code>fetchWithTimer</code> for critical API calls that impact user experience</li>
                            <li>Compare metrics across different devices and network conditions</li>
                            <li>Review the dashboard regularly to identify optimization opportunities</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function copyAccessCode() {
            var accessCode = document.getElementById("accessCode");
            var textArea = document.createElement("textarea");
            textArea.value = accessCode.textContent;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand("copy");
            document.body.removeChild(textArea);
            
            // Show success message
            var copySuccess = document.getElementById("copySuccess");
            copySuccess.style.display = "inline";
            
            // Hide success message after 2 seconds
            setTimeout(function() {
                copySuccess.style.display = "none";
            }, 2000);
        }
    </script>
}